//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BDO_Localisation_AddOn.LicenseService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ПроверкаОбновленииКонфигурацииSoapBinding", Namespace="http://localhost/ws/updateconf")]
    public partial class ПроверкаОбновленииКонфигурации : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ПроверитьОбновлениеКонфигурацииOperationCompleted;
        
        private System.Threading.SendOrPostCallback ЗарегистрироватьБазуOperationCompleted;
        
        private System.Threading.SendOrPostCallback ЗалицензироватьКонфигурациюOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ПроверкаОбновленииКонфигурации() {
            this.Url = global::BDO_Localisation_AddOn.Properties.Settings.Default.BDO_Localisation_AddOn_ge_ibs_update_ПроверкаОбновленииКонфигурации;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ПроверитьОбновлениеКонфигурацииCompletedEventHandler ПроверитьОбновлениеКонфигурацииCompleted;
        
        /// <remarks/>
        public event ЗарегистрироватьБазуCompletedEventHandler ЗарегистрироватьБазуCompleted;
        
        /// <remarks/>
        public event ЗалицензироватьКонфигурациюCompletedEventHandler ЗалицензироватьКонфигурациюCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ws/updateconf#ПроверкаОбновленииКонфигурации:ПроверитьОбновление" +
            "Конфигурации", RequestNamespace="http://localhost/ws/updateconf", ResponseNamespace="http://localhost/ws/updateconf", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public ДанныеОбновления ПроверитьОбновлениеКонфигурации(ДанныеКонфигурации ДанныеКонфигурации) {
            object[] results = this.Invoke("ПроверитьОбновлениеКонфигурации", new object[] {
                        ДанныеКонфигурации});
            return ((ДанныеОбновления)(results[0]));
        }
        
        /// <remarks/>
        public void ПроверитьОбновлениеКонфигурацииAsync(ДанныеКонфигурации ДанныеКонфигурации) {
            this.ПроверитьОбновлениеКонфигурацииAsync(ДанныеКонфигурации, null);
        }
        
        /// <remarks/>
        public void ПроверитьОбновлениеКонфигурацииAsync(ДанныеКонфигурации ДанныеКонфигурации, object userState) {
            if ((this.ПроверитьОбновлениеКонфигурацииOperationCompleted == null)) {
                this.ПроверитьОбновлениеКонфигурацииOperationCompleted = new System.Threading.SendOrPostCallback(this.OnПроверитьОбновлениеКонфигурацииOperationCompleted);
            }
            this.InvokeAsync("ПроверитьОбновлениеКонфигурации", new object[] {
                        ДанныеКонфигурации}, this.ПроверитьОбновлениеКонфигурацииOperationCompleted, userState);
        }
        
        private void OnПроверитьОбновлениеКонфигурацииOperationCompleted(object arg) {
            if ((this.ПроверитьОбновлениеКонфигурацииCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ПроверитьОбновлениеКонфигурацииCompleted(this, new ПроверитьОбновлениеКонфигурацииCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ws/updateconf#ПроверкаОбновленииКонфигурации:ЗарегистрироватьБаз" +
            "у", RequestNamespace="http://localhost/ws/updateconf", ResponseNamespace="http://localhost/ws/updateconf", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public ДанныеДемоБазы ЗарегистрироватьБазу(ДанныеКлиента ДанныеКлиента) {
            object[] results = this.Invoke("ЗарегистрироватьБазу", new object[] {
                        ДанныеКлиента});
            return ((ДанныеДемоБазы)(results[0]));
        }
        
        /// <remarks/>
        public void ЗарегистрироватьБазуAsync(ДанныеКлиента ДанныеКлиента) {
            this.ЗарегистрироватьБазуAsync(ДанныеКлиента, null);
        }
        
        /// <remarks/>
        public void ЗарегистрироватьБазуAsync(ДанныеКлиента ДанныеКлиента, object userState) {
            if ((this.ЗарегистрироватьБазуOperationCompleted == null)) {
                this.ЗарегистрироватьБазуOperationCompleted = new System.Threading.SendOrPostCallback(this.OnЗарегистрироватьБазуOperationCompleted);
            }
            this.InvokeAsync("ЗарегистрироватьБазу", new object[] {
                        ДанныеКлиента}, this.ЗарегистрироватьБазуOperationCompleted, userState);
        }
        
        private void OnЗарегистрироватьБазуOperationCompleted(object arg) {
            if ((this.ЗарегистрироватьБазуCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ЗарегистрироватьБазуCompleted(this, new ЗарегистрироватьБазуCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ws/updateconf#ПроверкаОбновленииКонфигурации:ЗалицензироватьКонф" +
            "игурацию", RequestNamespace="http://localhost/ws/updateconf", ResponseNamespace="http://localhost/ws/updateconf", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string ЗалицензироватьКонфигурацию(string ДанныеЛицензирования) {
            object[] results = this.Invoke("ЗалицензироватьКонфигурацию", new object[] {
                        ДанныеЛицензирования});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ЗалицензироватьКонфигурациюAsync(string ДанныеЛицензирования) {
            this.ЗалицензироватьКонфигурациюAsync(ДанныеЛицензирования, null);
        }
        
        /// <remarks/>
        public void ЗалицензироватьКонфигурациюAsync(string ДанныеЛицензирования, object userState) {
            if ((this.ЗалицензироватьКонфигурациюOperationCompleted == null)) {
                this.ЗалицензироватьКонфигурациюOperationCompleted = new System.Threading.SendOrPostCallback(this.OnЗалицензироватьКонфигурациюOperationCompleted);
            }
            this.InvokeAsync("ЗалицензироватьКонфигурацию", new object[] {
                        ДанныеЛицензирования}, this.ЗалицензироватьКонфигурациюOperationCompleted, userState);
        }
        
        private void OnЗалицензироватьКонфигурациюOperationCompleted(object arg) {
            if ((this.ЗалицензироватьКонфигурациюCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ЗалицензироватьКонфигурациюCompleted(this, new ЗалицензироватьКонфигурациюCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ws/updateconf")]
    public partial class ДанныеКонфигурации {
        
        private string версияField;
        
        private string конфигурацияField;
        
        private string данныеВебКлиентаField;
        
        private string идентификаторБазыField;
        
        /// <remarks/>
        public string Версия {
            get {
                return this.версияField;
            }
            set {
                this.версияField = value;
            }
        }
        
        /// <remarks/>
        public string Конфигурация {
            get {
                return this.конфигурацияField;
            }
            set {
                this.конфигурацияField = value;
            }
        }
        
        /// <remarks/>
        public string ДанныеВебКлиента {
            get {
                return this.данныеВебКлиентаField;
            }
            set {
                this.данныеВебКлиентаField = value;
            }
        }
        
        /// <remarks/>
        public string ИдентификаторБазы {
            get {
                return this.идентификаторБазыField;
            }
            set {
                this.идентификаторБазыField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ws/BaseRegistration")]
    public partial class ДанныеДемоБазы {
        
        private string адресFTPField;
        
        private string пользовательField;
        
        private string парольField;
        
        private string адрессБазыField;
        
        private string имяФайлаField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string АдресFTP {
            get {
                return this.адресFTPField;
            }
            set {
                this.адресFTPField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Пользователь {
            get {
                return this.пользовательField;
            }
            set {
                this.пользовательField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Пароль {
            get {
                return this.парольField;
            }
            set {
                this.парольField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string АдрессБазы {
            get {
                return this.адрессБазыField;
            }
            set {
                this.адрессБазыField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ИмяФайла {
            get {
                return this.имяФайлаField;
            }
            set {
                this.имяФайлаField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ws/BaseRegistration")]
    public partial class ДанныеКлиента {
        
        private string наименованиеField;
        
        private string телефонField;
        
        private string почтаField;
        
        private string наименованиеКомпанииField;
        
        private object язикField;
        
        private string позицияField;
        
        /// <remarks/>
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                this.наименованиеField = value;
            }
        }
        
        /// <remarks/>
        public string Телефон {
            get {
                return this.телефонField;
            }
            set {
                this.телефонField = value;
            }
        }
        
        /// <remarks/>
        public string Почта {
            get {
                return this.почтаField;
            }
            set {
                this.почтаField = value;
            }
        }
        
        /// <remarks/>
        public string НаименованиеКомпании {
            get {
                return this.наименованиеКомпанииField;
            }
            set {
                this.наименованиеКомпанииField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object Язик {
            get {
                return this.язикField;
            }
            set {
                this.язикField = value;
            }
        }
        
        /// <remarks/>
        public string Позиция {
            get {
                return this.позицияField;
            }
            set {
                this.позицияField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ws/updateconf")]
    public partial class СтрокаВерсии {
        
        private string версияField;
        
        private string локальныйОтносительныйКаталогField;
        
        private string путьКФайлуОбновленияField;
        
        private string файлОбновленияField;
        
        private string версияПлатформыField;
        
        private decimal размерФайлаОбновленияField;
        
        /// <remarks/>
        public string Версия {
            get {
                return this.версияField;
            }
            set {
                this.версияField = value;
            }
        }
        
        /// <remarks/>
        public string ЛокальныйОтносительныйКаталог {
            get {
                return this.локальныйОтносительныйКаталогField;
            }
            set {
                this.локальныйОтносительныйКаталогField = value;
            }
        }
        
        /// <remarks/>
        public string ПутьКФайлуОбновления {
            get {
                return this.путьКФайлуОбновленияField;
            }
            set {
                this.путьКФайлуОбновленияField = value;
            }
        }
        
        /// <remarks/>
        public string ФайлОбновления {
            get {
                return this.файлОбновленияField;
            }
            set {
                this.файлОбновленияField = value;
            }
        }
        
        /// <remarks/>
        public string ВерсияПлатформы {
            get {
                return this.версияПлатформыField;
            }
            set {
                this.версияПлатформыField = value;
            }
        }
        
        /// <remarks/>
        public decimal РазмерФайлаОбновления {
            get {
                return this.размерФайлаОбновленияField;
            }
            set {
                this.размерФайлаОбновленияField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ws/updateconf")]
    public partial class ДанныеОбновления {
        
        private bool естьОбновлениеField;
        
        private СтрокаВерсии[] версииОбновленияField;
        
        private string адрессРесурсаОбнавленияField;
        
        private string пользовательField;
        
        private string парольField;
        
        private byte[] информацияОбОбновленииField;
        
        /// <remarks/>
        public bool ЕстьОбновление {
            get {
                return this.естьОбновлениеField;
            }
            set {
                this.естьОбновлениеField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ВерсииОбновления", IsNullable=true)]
        public СтрокаВерсии[] ВерсииОбновления {
            get {
                return this.версииОбновленияField;
            }
            set {
                this.версииОбновленияField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string АдрессРесурсаОбнавления {
            get {
                return this.адрессРесурсаОбнавленияField;
            }
            set {
                this.адрессРесурсаОбнавленияField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Пользователь {
            get {
                return this.пользовательField;
            }
            set {
                this.пользовательField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Пароль {
            get {
                return this.парольField;
            }
            set {
                this.парольField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] ИнформацияОбОбновлении {
            get {
                return this.информацияОбОбновленииField;
            }
            set {
                this.информацияОбОбновленииField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ПроверитьОбновлениеКонфигурацииCompletedEventHandler(object sender, ПроверитьОбновлениеКонфигурацииCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ПроверитьОбновлениеКонфигурацииCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ПроверитьОбновлениеКонфигурацииCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ДанныеОбновления Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ДанныеОбновления)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ЗарегистрироватьБазуCompletedEventHandler(object sender, ЗарегистрироватьБазуCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ЗарегистрироватьБазуCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ЗарегистрироватьБазуCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ДанныеДемоБазы Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ДанныеДемоБазы)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ЗалицензироватьКонфигурациюCompletedEventHandler(object sender, ЗалицензироватьКонфигурациюCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ЗалицензироватьКонфигурациюCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ЗалицензироватьКонфигурациюCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591